openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8443
  description: Generated server url
paths:
  /api/books/{id}:
    get:
      tags:
      - book-rest-controller
      operationId: getBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
    put:
      tags:
      - book-rest-controller
      operationId: updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      tags:
      - book-rest-controller
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
  /api/books/{id}/image:
    get:
      tags:
      - book-rest-controller
      operationId: downloadImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - book-rest-controller
      operationId: uploadImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - book-rest-controller
      operationId: deleteImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/books/:
    get:
      tags:
      - book-rest-controller
      operationId: getBooks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
      - book-rest-controller
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
  /api/auth/refresh:
    post:
      tags:
      - login-controller
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/logout:
    post:
      tags:
      - login-controller
      operationId: logOut
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
      - login-controller
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/users/me:
    get:
      tags:
      - user-rest-controller
      operationId: me
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        image:
          type: boolean
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        name:
          type: string
        roles:
          type: array
          items:
            type: string
